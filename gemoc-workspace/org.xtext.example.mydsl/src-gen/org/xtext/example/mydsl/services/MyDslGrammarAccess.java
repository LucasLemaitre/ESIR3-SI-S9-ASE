/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFsmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_2_0 = (RuleCall)cTransitionsAssignment_2.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_4_0_0 = (RuleCall)cStatesAssignment_4_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_1_0 = (RuleCall)cTransitionsAssignment_4_1.eContents().get(0);
		
		//FSM returns FSM:
		//    'fsm'
		//    name=EString
		//    (transitions+=Transition)*
		//    (states+=State)
		//    (states+=State | transitions+=Transition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'fsm'
		//name=EString
		//(transitions+=Transition)*
		//(states+=State)
		//(states+=State | transitions+=Transition)*
		public Group getGroup() { return cGroup; }
		
		//'fsm'
		public Keyword getFsmKeyword_0() { return cFsmKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(transitions+=Transition)*
		public Assignment getTransitionsAssignment_2() { return cTransitionsAssignment_2; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_2_0() { return cTransitionsTransitionParserRuleCall_2_0; }
		
		//(states+=State)
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }
		
		//(states+=State | transitions+=Transition)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//states+=State
		public Assignment getStatesAssignment_4_0() { return cStatesAssignment_4_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0_0() { return cStatesStateParserRuleCall_4_0_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_4_1() { return cTransitionsAssignment_4_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_1_0() { return cTransitionsTransitionParserRuleCall_4_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInit_stateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInit_stateInitKeyword_1_0 = (Keyword)cInit_stateAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEntryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutput_textAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutput_textEStringParserRuleCall_4_0 = (RuleCall)cOutput_textAssignment_4.eContents().get(0);
		
		//State returns State:
		//    'state'
		//    init_state ?= 'init'?
		//    name=EString
		//    'entry' output_text=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'state'
		//init_state ?= 'init'?
		//name=EString
		//'entry' output_text=EString
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//init_state ?= 'init'?
		public Assignment getInit_stateAssignment_1() { return cInit_stateAssignment_1; }
		
		//'init'
		public Keyword getInit_stateInitKeyword_1_0() { return cInit_stateInitKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'entry'
		public Keyword getEntryKeyword_3() { return cEntryKeyword_3; }
		
		//output_text=EString
		public Assignment getOutput_textAssignment_4() { return cOutput_textAssignment_4; }
		
		//EString
		public RuleCall getOutput_textEStringParserRuleCall_4_0() { return cOutput_textEStringParserRuleCall_4_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStart_stateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStart_stateStateCrossReference_2_0 = (CrossReference)cStart_stateAssignment_2.eContents().get(0);
		private final RuleCall cStart_stateStateEStringParserRuleCall_2_0_1 = (RuleCall)cStart_stateStateCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnd_stateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEnd_stateStateCrossReference_4_0 = (CrossReference)cEnd_stateAssignment_4.eContents().get(0);
		private final RuleCall cEnd_stateStateEStringParserRuleCall_4_0_1 = (RuleCall)cEnd_stateStateCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInput_textAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInput_textEStringParserRuleCall_6_0 = (RuleCall)cInput_textAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transition returns Transition:
		//    'transition'
		//    name=EString
		//    start_state=[State|EString] '->' end_state=[State|EString]
		//    '['input_text=EString']';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition'
		//name=EString
		//start_state=[State|EString] '->' end_state=[State|EString]
		//'['input_text=EString']'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//start_state=[State|EString]
		public Assignment getStart_stateAssignment_2() { return cStart_stateAssignment_2; }
		
		//[State|EString]
		public CrossReference getStart_stateStateCrossReference_2_0() { return cStart_stateStateCrossReference_2_0; }
		
		//EString
		public RuleCall getStart_stateStateEStringParserRuleCall_2_0_1() { return cStart_stateStateEStringParserRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//end_state=[State|EString]
		public Assignment getEnd_stateAssignment_4() { return cEnd_stateAssignment_4; }
		
		//[State|EString]
		public CrossReference getEnd_stateStateCrossReference_4_0() { return cEnd_stateStateCrossReference_4_0; }
		
		//EString
		public RuleCall getEnd_stateStateEStringParserRuleCall_4_0_1() { return cEnd_stateStateEStringParserRuleCall_4_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//input_text=EString
		public Assignment getInput_textAssignment_6() { return cInput_textAssignment_6; }
		
		//EString
		public RuleCall getInput_textEStringParserRuleCall_6_0() { return cInput_textEStringParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	
	
	private final FSMElements pFSM;
	private final EStringElements pEString;
	private final StateElements pState;
	private final TransitionElements pTransition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFSM = new FSMElements();
		this.pEString = new EStringElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FSM returns FSM:
	//    'fsm'
	//    name=EString
	//    (transitions+=Transition)*
	//    (states+=State)
	//    (states+=State | transitions+=Transition)*;
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//State returns State:
	//    'state'
	//    init_state ?= 'init'?
	//    name=EString
	//    'entry' output_text=EString;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition returns Transition:
	//    'transition'
	//    name=EString
	//    start_state=[State|EString] '->' end_state=[State|EString]
	//    '['input_text=EString']';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
